package trabalhodeccorfilm.entities;

import java.io.Serializable;
import java.util.Collection;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 *
 * @author User
 */
@Entity
@Table(name = "cliente")
@NamedQueries({
    @NamedQuery(name = "Cliente.findAll", query = "SELECT c FROM Cliente c"),
    @NamedQuery(name = "Cliente.findByNome", query = "SELECT c FROM Cliente c WHERE c.nome = :nome"),
    @NamedQuery(name = "Cliente.findByIdade", query = "SELECT c FROM Cliente c WHERE c.idade = :idade"),
    @NamedQuery(name = "Cliente.findByContato", query = "SELECT c FROM Cliente c WHERE c.contato = :contato"),
    @NamedQuery(name = "Cliente.findByEndere\u00e7o", query = "SELECT c FROM Cliente c WHERE c.endere\u00e7o = :endere\u00e7o"),
    @NamedQuery(name = "Cliente.findByIDCliente", query = "SELECT c FROM Cliente c WHERE c.iDCliente = :iDCliente")})
public class Cliente implements Serializable {

    @OneToMany(cascade = CascadeType.ALL, mappedBy = "iDCliente")
    private Collection<Serviço> serviçoCollection;

    private static final long serialVersionUID = 1L;
    @Basic(optional = false)
    @Column(name = "Nome")
    private String nome;
    @Basic(optional = false)
    @Column(name = "Idade")
    private int idade;
    @Basic(optional = false)
    @Column(name = "Contato")
    private String contato;
    @Basic(optional = false)
    @Column(name = "Endere\u00e7o")
    private String endereço;
    @Id
    @Basic(optional = false)
    @Column(name = "IDCliente")
    private String iDCliente;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "iDCliente")
    private List<Serviço> serviçoList;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "cliente")
    private List<Opina> opinaList;

    public Cliente() {
    }

    public Cliente(String iDCliente) {
        this.iDCliente = iDCliente;
    }

    public Cliente(String nome, String contato, String endereço) {
        this.nome = nome;
        this.contato = contato;
        this.endereço = endereço;
    }

    public Cliente(String nome, String contato, String endereço, String iDCliente) {
        this.nome = nome;
        this.contato = contato;
        this.endereço = endereço;
        this.iDCliente = iDCliente;
    }

    public Cliente(String nome, String contato, String endereço, String iDCliente, List<Serviço> serviçoList, List<Opina> opinaList) {
        this.nome = nome;
        this.contato = contato;
        this.endereço = endereço;
        this.iDCliente = iDCliente;
        this.serviçoList = serviçoList;
        this.opinaList = opinaList;
    }
    
    
    
    public Cliente(String iDCliente, String nome, int idade, String contato, String endereço) {
        this.iDCliente = iDCliente;
        this.nome = nome;
        this.idade = idade;
        this.contato = contato;
        this.endereço = endereço;
    }

    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    public int getIdade() {
        return idade;
    }

    public void setIdade(int idade) {
        this.idade = idade;
    }

    public String getContato() {
        return contato;
    }

    public void setContato(String contato) {
        this.contato = contato;
    }

    public String getEndereço() {
        return endereço;
    }

    public void setEndereço(String endereço) {
        this.endereço = endereço;
    }

    public String getIDCliente() {
        return iDCliente;
    }

    public void setIDCliente(String iDCliente) {
        this.iDCliente = iDCliente;
    }

    public List<Serviço> getServiçoList() {
        return serviçoList;
    }

    public void setServiçoList(List<Serviço> serviçoList) {
        this.serviçoList = serviçoList;
    }

    public List<Opina> getOpinaList() {
        return opinaList;
    }

    public void setOpinaList(List<Opina> opinaList) {
        this.opinaList = opinaList;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (iDCliente != null ? iDCliente.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Cliente)) {
            return false;
        }
        Cliente other = (Cliente) object;
        if ((this.iDCliente == null && other.iDCliente != null) || (this.iDCliente != null && !this.iDCliente.equals(other.iDCliente))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return nome;
    }

    public Collection<Serviço> getServiçoCollection() {
        return serviçoCollection;
    }

    public void setServiçoCollection(Collection<Serviço> serviçoCollection) {
        this.serviçoCollection = serviçoCollection;
    }
    
} //Fim da Tebela Cliente  
// Inicio do CRUD

package trabalhodeccorfilm;

import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import trabalhodeccorfilm.controllers.ClienteJpaController;
import trabalhodeccorfilm.entities.Cliente;


public class CadastroCliente extends javax.swing.JFrame {

    EntityManagerFactory emf;
    ClienteJpaController cjc;
    
    public CadastroCliente() {
        initComponents();
        emf = Persistence.createEntityManagerFactory("TrabalhoDeccorFilmPU");
        cjc = new ClienteJpaController(emf);
        atualizarTabela();
        jTextField2.requestFocus();
    }

    private void atualizarTabela() {
        ((DefaultTableModel)jTable1.getModel()).setRowCount(0);
        List<Cliente> cliente = cjc.findClienteEntities();
        
        for (Cliente cliente1 : cliente) {
            String linha[] = {
                cliente1.getIDCliente(),
                cliente1.getNome(),
                cliente1.getContato(),
                cliente1.getEndereço()
        };
        ((DefaultTableModel)jTable1.getModel()).addRow(linha);
  }
        
        
        
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("ID");

        jLabel2.setText("Nome");

        jLabel3.setText("Contato");

        jLabel4.setText("Endereço");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "Contato", "Endereço"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Limpar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Inserir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Alterar");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Remover");
        jButton4.setEnabled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 519, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField4))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 107, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                                .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(105, 105, 105))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        atualizarTabela();
        limparCampos();
        reiniciarBotoes();
    }                                        

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        String id = jTextField1.getText();
        String nome = jTextField2.getText();
        String contato = jTextField3.getText();
        String endereco = jTextField4.getText();
        try{
            if(id.equals("") || nome.equals("") || contato.equals("") || endereco.equals("")) {
               throw new Exception("Preencha todos os campos.");
            }
             Cliente cliente = new Cliente(id, nome, WIDTH, contato, endereco);
             cjc.create(cliente);
             reiniciarBotoes();
             atualizarTabela();
             limparCampos();
        } catch (Exception e) {
             JOptionPane.showMessageDialog(this, e.getMessage(), "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }                                        

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {                                     
        if(evt.getClickCount() == 2){
           int x = jTable1.getSelectedRow();
           jTextField1.setText(((DefaultTableModel)jTable1.getModel()).getValueAt(x, 0).toString());
           jTextField2.setText(((DefaultTableModel)jTable1.getModel()).getValueAt(x, 1).toString());
           jTextField3.setText(((DefaultTableModel)jTable1.getModel()).getValueAt(x, 2).toString());
           jTextField4.setText(((DefaultTableModel)jTable1.getModel()).getValueAt(x, 3).toString());
           habilitarBotoes();
        }
    }                                    

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        String id = jTextField1.getText();
        String nome = jTextField2.getText();
        String contato = jTextField3.getText();
        String endereco = jTextField4.getText();
        try{
            if(nome.equals("") || contato.equals("") || endereco.equals("")) {
               throw new Exception("Preencha todos os campos.");
            }
             Cliente cliente = new Cliente(nome, contato, endereco, id, cjc.findCliente(id).getServiçoList(), cjc.findCliente(id).getOpinaList());
             cjc.edit(cliente);
             reiniciarBotoes();
             atualizarTabela();
             limparCampos();
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, 
                    e.getMessage(), 
                    "ERRO", 
                    JOptionPane.ERROR_MESSAGE);
        }
    }                                        

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        try {
        if(JOptionPane.showConfirmDialog(this, 
                "Tem certeza que quer remover?", 
                "Confirmação", JOptionPane.WARNING_MESSAGE) != JOptionPane.OK_OPTION) {
           throw new Exception("Operação cancelada pelo usuário!");
        }
        
        // Convertendo a string em um inteiro
        String idString = jTextField1.getText();
        int id = Integer.parseInt(idString);

        // Convertendo o inteiro de volta para string
        String idConvertido = String.valueOf(id);

        cjc.destroy(idConvertido);
        reiniciarBotoes();
        atualizarTabela();
        limparCampos();
    } catch(NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, 
                "Por favor, insira um número válido para o ID.", 
                "ERRO", 
                JOptionPane.ERROR_MESSAGE);
    } catch(Exception e) {
        JOptionPane.showMessageDialog(this, 
                e.getMessage(), 
                "ERRO", 
                JOptionPane.ERROR_MESSAGE);
}


    }                                        

     private void limparCampos() {
       jTextField1.setText("");
       jTextField2.setText("");
       jTextField3.setText("");
       jTextField4.setText("");
       jTextField2.requestFocus();
    }
    
    private void reiniciarBotoes() {
       jButton1.setEnabled(true);
       jButton2.setEnabled(true);
       jButton3.setEnabled(false);
       jButton4.setEnabled(false); 
    } 
    
    private void habilitarBotoes() {
       jButton1.setEnabled(true);
       jButton2.setEnabled(false);
       jButton3.setEnabled(true);
       jButton4.setEnabled(true); 
    } 
     
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastroCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastroCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastroCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CadastroCliente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration                   
}
